CREATE TABLE IF NOT EXISTS TaskTable(
    id TEXT NOT NULL PRIMARY KEY,
    type TEXT NOT NULL,
    progressType TEXT NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    startEpochDay INTEGER NOT NULL,
    endEpochDay INTEGER NOT NULL,
    priority INTEGER NOT NULL,
    createdAt INTEGER NOT NULL,
    deletedAt INTEGER
);

CREATE TABLE IF NOT EXISTS TaskContentTable(
    id TEXT NOT NULL PRIMARY KEY,
    taskId TEXT NOT NULL,
    contentType TEXT NOT NULL,
    content TEXT NOT NULL,
    startEpochDay INTEGER NOT NULL,
    createdAt INTEGER NOT NULL,
    FOREIGN KEY (taskId) REFERENCES TaskTable(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS ReminderTable(
    id TEXT NOT NULL PRIMARY KEY,
    taskId TEXT NOT NULL,
    type TEXT NOT NULL,
    schedule TEXT NOT NULL,
    time TEXT NOT NULL,
    createdAt INTEGER NOT NULL,
    FOREIGN KEY (taskId) REFERENCES TaskTable(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS RecordTable(
    id TEXT NOT NULL PRIMARY KEY,
    taskId TEXT NOT NULL,
    epochDay INTEGER NOT NULL,
    entry TEXT NOT NULL,
    createdAt INTEGER NOT NULL,
    FOREIGN KEY (taskId) REFERENCES TaskTable(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS TagTable(
    id TEXT NOT NULL PRIMARY KEY,
    title TEXT NOT NULL,
    createdAt INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS TagCrossTable(
    taskId TEXT NOT NULL,
    tagId TEXT NOT NULL,
    FOREIGN KEY (taskId) REFERENCES TaskTable(id) ON DELETE CASCADE,
    FOREIGN KEY (tagId) REFERENCES TagTable(id) ON DELETE CASCADE,
    PRIMARY KEY (taskId, tagId)
);

insertTask:
INSERT OR REPLACE INTO TaskTable
VALUES ?;

insertTaskContent:
INSERT OR REPLACE INTO TaskContentTable
VALUES ?;

selectTaskWithContentById:
SELECT
tTask.id task_id,
tTask.type task_type,
tTask.progressType task_progressType,
tTask.title task_title,
tTask.description task_description,
tTask.startEpochDay task_startEpochDay,
tTask.endEpochDay task_endEpochDay,
tTask.priority task_priority,
tTask.createdAt task_createdAt,
tTask.deletedAt task_deletedAt,

tTaskContent.id taskContent_id,
tTaskContent.taskId taskContent_taskId,
tTaskContent.contentType taskContent_contentType,
tTaskContent.content taskContent_content,
tTaskContent.startEpochDay taskContent_startEpochDay,
tTaskContent.createdAt taskContent_createdAt

FROM TaskTable tTask
INNER JOIN (
    SELECT * FROM TaskContentTable tInner
    WHERE tInner.taskId = :taskId
    GROUP BY tInner.contentType
    HAVING tInner.startEpochDay = MAX(tInner.startEpochDay)
) tTaskContent ON tTaskContent.taskId = tTask.id
WHERE tTask.id = :taskId;

selectTasksWithContentBySearchQuery:
SELECT
tTask.id task_id,
tTask.type task_type,
tTask.progressType task_progressType,
tTask.title task_title,
tTask.description task_description,
tTask.startEpochDay task_startEpochDay,
tTask.endEpochDay task_endEpochDay,
tTask.priority task_priority,
tTask.createdAt task_createdAt,
tTask.deletedAt task_deletedAt,

tTaskContent.id taskContent_id,
tTaskContent.taskId taskContent_taskId,
tTaskContent.contentType taskContent_contentType,
tTaskContent.content taskContent_content,
tTaskContent.startEpochDay taskContent_startEpochDay,
tTaskContent.createdAt taskContent_createdAt

FROM TaskTable tTask
INNER JOIN (
    SELECT * FROM TaskContentTable tInner
    GROUP BY tInner.taskId, tInner.contentType
    HAVING tInner.startEpochDay = MAX(tInner.startEpochDay)
) tTaskContent ON tTaskContent.taskId = tTask.id
WHERE tTask.deletedAt IS NULL AND
tTask.title LIKE :searchQuery;

selectFullTasksByDate:
SELECT
tTask.id task_id,
tTask.type task_type,
tTask.progressType task_progressType,
tTask.title task_title,
tTask.description task_description,
tTask.startEpochDay task_startEpochDay,
tTask.endEpochDay task_endEpochDay,
tTask.priority task_priority,
tTask.createdAt task_createdAt,
tTask.deletedAt task_deletedAt,

tTaskContent.id taskContent_id,
tTaskContent.taskId taskContent_taskId,
tTaskContent.contentType taskContent_contentType,
tTaskContent.content taskContent_content,
tTaskContent.startEpochDay taskContent_startEpochDay,
tTaskContent.createdAt taskContent_createdAt,

tReminder.id reminder_id,
tReminder.taskId reminder_taskId,
tReminder.time reminder_time,
tReminder.type reminder_type,
tReminder.schedule reminder_schedule,
tReminder.createdAt reminder_createdAt,

tCross.taskId tagCross_taskId,
tCross.tagId tagCross_tagId,

tTag.id tag_id,
tTag.title tag_title,
tTag.createdAt tag_createdAt

FROM TaskTable tTask
INNER JOIN (
    SELECT * FROM TaskContentTable tInner
    WHERE tInner.startEpochDay <= :targetEpochDay
    GROUP BY tInner.taskId, tInner.contentType
    HAVING tInner.startEpochDay = MAX(tInner.startEpochDay)
) tTaskContent ON tTaskContent.taskId = tTask.id

LEFT JOIN ReminderTable tReminder
ON tReminder.taskId = tTask.id

LEFT JOIN TagCrossTable tCross
ON tCross.taskId = tTask.id

LEFT JOIN TagTable tTag
ON tTag.id = tCross.tagId

WHERE tTask.deletedAt IS NULL AND
tTask.startEpochDay <= :targetEpochDay AND
tTask.endEpochDay >= :targetEpochDay;

updateTaskTitleById:
UPDATE TaskTable SET title = :title
WHERE id = :taskId;

updateTaskDescriptionById:
UPDATE TaskTable SET description = :description
WHERE id = :taskId;

updateTaskPriorityById:
UPDATE TaskTable SET priority = :priority
WHERE id = :taskId;

updateTaskDeletedAtById:
UPDATE TaskTable SET deletedAt = :deletedAt
WHERE id = :taskId;

updateTaskContentById:
UPDATE TaskContentTable SET content = :content
WHERE id = :contentId;

updateTaskStartDateById:
UPDATE TaskTable SET
startEpochDay = :taskStartEpochDay
WHERE id = :taskId;

updateTaskEndDateById:
UPDATE TaskTable SET
endEpochDay = :taskEndEpochDay
WHERE id = :taskId;

updateTaskStartEndDateById:
UPDATE TaskTable SET
startEpochDay = :taskStartEpochDay,
endEpochDay = :taskEndEpochDay
WHERE id = :taskId;

deleteTaskById:
DELETE FROM TaskTable
WHERE id = :taskId;

selectTaskContentByTaskId:
SELECT * FROM TaskContentTable tTaskContent
WHERE tTaskContent.taskId = :taskId
AND tTaskContent.contentType = :taskContentType
GROUP BY tTaskContent.contentType
HAVING tTaskContent.startEpochDay = MAX(tTaskContent.startEpochDay);